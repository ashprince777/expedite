/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type PartnerImage = {
  _type: "partnerImage";
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
};

export type SiteSettings = {
  _id: string;
  _type: "siteSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  heroHeading?: string;
  heroSubheading?: string;
  heroImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  email?: string;
  phone?: string;
  whatsapp?: string;
  address?: string;
  officeMap?: string;
  partnerImage?: Array<{
    _key: string;
  } & PartnerImage>;
  socialLinks?: Array<{
    _key: string;
  } & SocialLink>;
};

export type SocialLink = {
  _type: "socialLink";
  platform?: string;
  url?: string;
};

export type Testimonial = {
  _id: string;
  _type: "testimonial";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  role?: string;
  company?: string;
  quote?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  featured?: boolean;
};

export type Benefits = {
  _id: string;
  _type: "benefits";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  icon?: string;
  name?: string;
  description?: string;
};

export type Legal = {
  _id: string;
  _type: "legal";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type FrameworkContent = {
  _id: string;
  _type: "frameworkContent";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  serviceSummary?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  keyChallenges?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  keyChallengeImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  benefits?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "benefits";
  }>;
  howItWorks?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  howItWorksImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type ServiceContent = {
  _id: string;
  _type: "serviceContent";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  serviceSummary?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  keyChallenges?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  keyChallengeImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  benefits?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "benefits";
  }>;
  howItWorks?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  howItWorksImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Service = {
  _id: string;
  _type: "service";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  description?: string;
  icon?: string;
  color?: Color;
  serviceBrief?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  serviceImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  benefits?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "benefits";
  }>;
  importanceOfService?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  howItWorks?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  cyberSecurityServices?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "serviceContent";
  }>;
  cyberSecurityFrameworks?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "frameworkContent";
  }>;
};

export type Insight = {
  _id: string;
  _type: "insight";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  isTopBlog?: boolean;
  isTopNews?: boolean;
  publishedAt?: string;
  description?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type Color = {
  _type: "color";
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: "rgbaColor";
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: "hsvaColor";
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: "hslaColor";
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | PartnerImage | SiteSettings | SocialLink | Testimonial | Benefits | Legal | FrameworkContent | ServiceContent | Service | Insight | Author | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Category | Slug | BlockContent | Color | RgbaColor | HsvaColor | HslaColor;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/insights/getAllInsights.ts
// Variable: getAllInsightsQuery
// Query: *[_type == "insight"] | order(_createdAt desc) {     	_id,	  title,	  slug,	  isTopBlog,    isTopNews,	  mainImage,	  category->{		...	  },	  publishedAt,	   "description": body[0..1].children[].text    }
export type GetAllInsightsQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  isTopBlog: boolean | null;
  isTopNews: boolean | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  category: {
    _id: string;
    _type: "category";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    description?: string;
  } | null;
  publishedAt: string | null;
  description: Array<string | null> | null;
}>;

// Source: ./sanity/lib/insights/getInsightBySlug.ts
// Variable: getInsightBySlugQuery
// Query: *[_type == "insight" && slug.current == $slug][0]{      ...,      category->{ ... },      author->{ ... }    }
export type GetInsightBySlugQueryResult = {
  _id: string;
  _type: "insight";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author: {
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    bio?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  } | null;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  category: {
    _id: string;
    _type: "category";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    description?: string;
  } | null;
  isTopBlog?: boolean;
  isTopNews?: boolean;
  publishedAt?: string;
  description?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
} | null;

// Source: ./sanity/lib/insights/getInsightsByCategorySlug.ts
// Variable: getInsightByCategoryQuery
// Query: *[_type == "insight" && category->slug.current == $slug] | order(_createdAt desc) {		_id,		_createdAt,	  title,	  slug,	  isTopBlog,	  isTopNews,	  mainImage,	  category->{		...	  },	  publishedAt,	   "description": body[0].children[].text	}
export type GetInsightByCategoryQueryResult = Array<{
  _id: string;
  _createdAt: string;
  title: string | null;
  slug: Slug | null;
  isTopBlog: boolean | null;
  isTopNews: boolean | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  category: {
    _id: string;
    _type: "category";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    description?: string;
  } | null;
  publishedAt: string | null;
  description: Array<string | null> | null;
}>;

// Source: ./sanity/lib/others/getLegal.ts
// Variable: getLegalQuery
// Query: *[_type == "legal"] {    slug,    title,}
export type GetLegalQueryResult = Array<{
  slug: Slug | null;
  title: string | null;
}>;
// Variable: getLegalBySlugQuery
// Query: *[_type == "legal" && slug.current == $slug][0] {    ...,    body}
export type GetLegalBySlugQueryResult = {
  _id: string;
  _type: "legal";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
} | null;

// Source: ./sanity/lib/others/getSiteSettings.ts
// Variable: getSiteSettingsQuery
// Query: *[_type == "siteSettings"][0]
export type GetSiteSettingsQueryResult = {
  _id: string;
  _type: "siteSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  heroHeading?: string;
  heroSubheading?: string;
  heroImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  email?: string;
  phone?: string;
  whatsapp?: string;
  address?: string;
  officeMap?: string;
  partnerImage?: Array<{
    _key: string;
  } & PartnerImage>;
  socialLinks?: Array<{
    _key: string;
  } & SocialLink>;
} | null;

// Source: ./sanity/lib/others/getTestimonials.ts
// Variable: getTestimonialQuery
// Query: *[_type == "testimonial" && featured == true] | order(_createdAt desc){    name,    role,    company,    quote,    image}
export type GetTestimonialQueryResult = Array<{
  name: string | null;
  role: string | null;
  company: string | null;
  quote: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
}>;

// Source: ./sanity/lib/services/getSecurityFrameworkBySlug.ts
// Variable: getSecurityFrameworkQuery
// Query: *[_type == "frameworkContent" && slug.current == $slug][0]{        ...,        benefits[]->{...},        cyberSecurityFrameworks[]->{            title,            slug        }    }
export type GetSecurityFrameworkQueryResult = {
  _id: string;
  _type: "frameworkContent";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  serviceSummary?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  keyChallenges?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  keyChallengeImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  benefits: Array<{
    _id: string;
    _type: "benefits";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    icon?: string;
    name?: string;
    description?: string;
  }> | null;
  howItWorks?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  howItWorksImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  cyberSecurityFrameworks: null;
} | null;
// Variable: getFrameworkByContentQuery
// Query: *[_type == "service" && references(*[_type == "frameworkContent" && slug.current == $slug][0]._id)][0]{        name,        icon,        color,        slug    }
export type GetFrameworkByContentQueryResult = {
  name: string | null;
  icon: string | null;
  color: Color | null;
  slug: Slug | null;
} | null;

// Source: ./sanity/lib/services/getServiceBySlug.ts
// Variable: getServicesBySlugQuery
// Query: *[_type == "service" && slug.current == $slug][0]{        ...,		serviceBrief,        serviceImage,          benefits[]->{...},          importanceOfService,          howItWorks,        cyberSecurityServices[]->{            title,            slug,			description,        },        cyberSecurityFrameworks[]->{             title,            slug,			description,        }    }
export type GetServicesBySlugQueryResult = {
  _id: string;
  _type: "service";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  description?: string;
  icon?: string;
  color?: Color;
  serviceBrief: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  serviceImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  benefits: Array<{
    _id: string;
    _type: "benefits";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    icon?: string;
    name?: string;
    description?: string;
  }> | null;
  importanceOfService: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  howItWorks: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  cyberSecurityServices: Array<{
    title: string | null;
    slug: Slug | null;
    description: string | null;
  }> | null;
  cyberSecurityFrameworks: Array<{
    title: string | null;
    slug: Slug | null;
    description: string | null;
  }> | null;
} | null;

// Source: ./sanity/lib/services/getServiceContentBySlug.ts
// Variable: getServicesContentQuery
// Query: *[_type == "serviceContent" && slug.current == $slug][0]{        ...,		benefits[]->{...},        cyberSecurityServices[]->{            title,            slug        }    }
export type GetServicesContentQueryResult = {
  _id: string;
  _type: "serviceContent";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  serviceSummary?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  keyChallenges?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  keyChallengeImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  benefits: Array<{
    _id: string;
    _type: "benefits";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    icon?: string;
    name?: string;
    description?: string;
  }> | null;
  howItWorks?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  howItWorksImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  cyberSecurityServices: null;
} | null;
// Variable: getServicesByContentQuery
// Query: *[_type == "service" && references(*[_type == "serviceContent" && slug.current == $slug][0]._id)][0]{		name,		icon,		color,		slug	}
export type GetServicesByContentQueryResult = {
  name: string | null;
  icon: string | null;
  color: Color | null;
  slug: Slug | null;
} | null;

// Source: ./sanity/lib/services/getServices.ts
// Variable: getServicesQuery
// Query: *[_type == "service"]{		name,		slug,		description,		icon,		color,		cyberSecurityServices[]->{			title,			slug		},		cyberSecurityFrameworks[]->{			title,			slug		},	}
export type GetServicesQueryResult = Array<{
  name: string | null;
  slug: Slug | null;
  description: string | null;
  icon: string | null;
  color: Color | null;
  cyberSecurityServices: Array<{
    title: string | null;
    slug: Slug | null;
  }> | null;
  cyberSecurityFrameworks: Array<{
    title: string | null;
    slug: Slug | null;
  }> | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"insight\"] | order(_createdAt desc) {\n     \t_id,\n\t  title,\n\t  slug,\n\t  isTopBlog,\n    isTopNews,\n\t  mainImage,\n\t  category->{\n\t\t...\n\t  },\n\t  publishedAt,\n\t   \"description\": body[0..1].children[].text\n    }": GetAllInsightsQueryResult;
    "*[_type == \"insight\" && slug.current == $slug][0]{\n      ...,\n      category->{ ... },\n      author->{ ... }\n    }": GetInsightBySlugQueryResult;
    "*[_type == \"insight\" && category->slug.current == $slug] | order(_createdAt desc) {\n\t\t_id,\n\t\t_createdAt,\n\t  title,\n\t  slug,\n\t  isTopBlog,\n\t  isTopNews,\n\t  mainImage,\n\t  category->{\n\t\t...\n\t  },\n\t  publishedAt,\n\t   \"description\": body[0].children[].text\n\t}": GetInsightByCategoryQueryResult;
    "*[_type == \"legal\"] {\n    slug,\n    title,\n}": GetLegalQueryResult;
    "*[_type == \"legal\" && slug.current == $slug][0] {\n    ...,\n    body\n}": GetLegalBySlugQueryResult;
    "*[_type == \"siteSettings\"][0]": GetSiteSettingsQueryResult;
    "*[_type == \"testimonial\" && featured == true] | order(_createdAt desc){\n    name,\n    role,\n    company,\n    quote,\n    image\n}": GetTestimonialQueryResult;
    "*[_type == \"frameworkContent\" && slug.current == $slug][0]{\n        ...,\n        benefits[]->{...},\n        cyberSecurityFrameworks[]->{\n            title,\n            slug\n        }\n    }": GetSecurityFrameworkQueryResult;
    "*[_type == \"service\" && references(*[_type == \"frameworkContent\" && slug.current == $slug][0]._id)][0]{\n        name,\n        icon,\n        color,\n        slug\n    }": GetFrameworkByContentQueryResult;
    "*[_type == \"service\" && slug.current == $slug][0]{\n        ...,\n\t\tserviceBrief,\n        serviceImage,\n          benefits[]->{...},\n          importanceOfService,\n          howItWorks,\n        cyberSecurityServices[]->{\n            title,\n            slug,\n\t\t\tdescription,\n        },\n        cyberSecurityFrameworks[]->{\n             title,\n            slug,\n\t\t\tdescription,\n        }\n    }": GetServicesBySlugQueryResult;
    "*[_type == \"serviceContent\" && slug.current == $slug][0]{\n        ...,\n\t\tbenefits[]->{...},\n        cyberSecurityServices[]->{\n            title,\n            slug\n        }\n    }": GetServicesContentQueryResult;
    "*[_type == \"service\" && references(*[_type == \"serviceContent\" && slug.current == $slug][0]._id)][0]{\n\t\tname,\n\t\ticon,\n\t\tcolor,\n\t\tslug\n\t}": GetServicesByContentQueryResult;
    "*[_type == \"service\"]{\n\t\tname,\n\t\tslug,\n\t\tdescription,\n\t\ticon,\n\t\tcolor,\n\t\tcyberSecurityServices[]->{\n\t\t\ttitle,\n\t\t\tslug\n\t\t},\n\t\tcyberSecurityFrameworks[]->{\n\t\t\ttitle,\n\t\t\tslug\n\t\t},\n\t}": GetServicesQueryResult;
  }
}
